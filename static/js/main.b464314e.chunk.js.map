{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","state","fetch","then","response","json","users","setState","this","filteredRobots","filter","robot","toLowerCase","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oOAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE5B,OACC,yBAAKC,UAAY,uDAChB,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,gCAAMF,EAAN,KACA,+BAAKC,EAAL,QCaWK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEIA,EAAOC,KAAI,SAACC,EAAKC,GAClB,OACC,kBAAC,EAAD,CACAC,IAAOD,EACPR,GAAMK,EAAOG,GAAGR,GAChBF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCERW,EAbE,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC/B,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAY,mCACZY,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCCDI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAkBC,OAAO,UAC/DJ,EAAMK,WC4CKC,G,wDAzCd,aAAc,IAAD,8BACZ,gBAaDC,eAAiB,SAACC,KAZjB,EAAKC,MAAQ,CACZrB,OAAQ,GACRM,YAAa,IAJF,E,qDAQb,WAAoB,IAAD,OAClBgB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKC,SAAS,CAAC3B,OAAO0B,S,oBAQtC,WACC,MAA+BE,KAAKP,MAA5BrB,EAAR,EAAQA,OAAQM,EAAhB,EAAgBA,YACVuB,EAAiB7B,EAAO8B,QAAO,SAAAC,GACpC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS3B,EAAY0B,kBAEtD,OAAqB,IAAlBhC,EAAOkC,OACF,uCAGN,yBAAKtC,UAAY,MAChB,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWW,aAAgBqB,KAAKT,iBAChC,kBAAC,EAAD,KACC,kBAAE,EAAF,CAAWnB,OAAQ6B,U,GAjCPM,IAAMC,YCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCGdO,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.b464314e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\t//destructure\n\treturn (\t\t\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\t\t\n\t\t\t<div>\n\t\t\t\t<h2> {name} </h2>\n\t\t\t\t<p> {email} </p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn(\n\t\t<div>\n\t\t\t{\n\t\t  \t\trobots.map((user,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey = {i} \n\t\t\t\t\t\tid = {robots[i].id} \n\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})\n\t  \t\t}\n\t  \t</div>\n\t)\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox =({searchfield, searchChange}) =>{\n\treturn(\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange = {searchChange}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY:'scroll', border:'5px solid black',height:'800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n};\n\nexport default Scroll;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n\nclass App extends React.Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response=>response.json())\n\t\t\t.then(users =>this.setState({robots:users}));\n\t}\n\n\tonSearchChange = (event) => {\n\t\t//this.setState( {searchfield:event.target.value })\n\n\t}\n\n\trender(){\n\t\tconst { robots, searchfield} = this.state;\n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\tif(robots.length === 0){\n\t\t\treturn <h1>Loading</h1>\n\t\t}else{\n\t\t\treturn (\n\t\t\t\t<div className = 'tc'>\n\t\t\t\t\t<h1 className='f1'> RoboFriends </h1>\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t< CardList robots={filteredRobots} />\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n  <App/>, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}